### Operadores e Estruturas em C#

#### Operadores Aritméticos

- [x] `+` (adição): Soma dois valores.
- [x] `-` (subtração): Subtrai um valor de outro.
- [x] `*` (multiplicação): Multiplica dois valores.
- [x] `/` (divisão): Divide um valor pelo outro.
- [x] `%` (módulo): Retorna o resto da divisão de um valor pelo outro.

#### Operadores de Atribuição

- [x] `=` (atribuição): Atribui um valor a uma variável.
- [x] `+=` (atribuição de adição): Adiciona um valor a uma variável.
- [x] `-=` (atribuição de subtração): Subtrai um valor de uma variável.
- [x] `*=` (atribuição de multiplicação): Multiplica uma variável por um valor.
- [x] `/=` (atribuição de divisão): Divide uma variável por um valor.

#### Operadores de Comparação

- [x] `==` (igual): Verifica se dois valores são iguais.
- [x] `!=` (diferente): Verifica se dois valores são diferentes.
- [x] `<` (menor que): Verifica se um valor é menor que outro.
- [x] `>` (maior que): Verifica se um valor é maior que outro.
- [x] `<=` (menor ou igual a): Verifica se um valor é menor ou igual a outro.
- [x] `>=` (maior ou igual a): Verifica se um valor é maior ou igual a outro.

#### Operadores Lógicos

- [x] `&&` (E lógico): Retorna verdadeiro se ambas as condições forem verdadeiras.
- [x] `||` (OU lógico): Retorna verdadeiro se pelo menos uma das condições for verdadeira.
- [x] `!` (Negação lógica): Inverte o valor lógico de uma expressão.

#### Operadores Bit a Bit

- [x] `&` (E bit a bit): Realiza uma operação AND bit a bit entre dois valores.
- [x] `|` (OU bit a bit): Realiza uma operação OR bit a bit entre dois valores.
- [x] `^` (OU exclusivo bit a bit): Realiza uma operação XOR bit a bit entre dois valores.
- [x] `~` (Negação bit a bit): Inverte todos os bits de um valor.

#### Operadores de Deslocamento de Bits

- [x] `<<` (Deslocamento à esquerda): Desloca os bits de um valor para a esquerda.
- [x] `>>` (Deslocamento à direita): Desloca os bits de um valor para a direita.

#### Estruturas de Controle

##### Estruturas Condicionais

- [x] `if` (se): Executa um bloco de código se a condição for verdadeira.
  
 Exemplo:
 ```csharp
  int idade = 18;
  if (idade >= 18)
  {
      Console.WriteLine("Você é maior de idade.");
  }

- [x] `else` (senão): Executa um bloco de código alternativo se a condição do if for falsa.

Exemplo:
  ```csharp
  int idade = 15;
if (idade >= 18)
{
    Console.WriteLine("Você é maior de idade.");
}
else
{
    Console.WriteLine("Você é menor de idade.");
}

- [x] `else if` (senão se): Executa um bloco de código alternativo se a condição do if for falsa.

  Exemplo:
  ```csharp
  int nota = 75;
if (nota >= 90)
{
    Console.WriteLine("Nota A");
}
else if (nota >= 80)
{
    Console.WriteLine("Nota B");
}
else if (nota >= 70)
{
    Console.WriteLine("Nota C");
}
else
{
    Console.WriteLine("Nota F");
}

- [x] `switch` (escolha): Avalia uma expressão e executa um bloco de código correspondente com base em valores. 

Exemplo:
  ```csharp
  int opcao = 2;
switch (opcao)
{
    case 1:
        Console.WriteLine("Opção 1 selecionada.");
        break;
    case 2:
        Console.WriteLine("Opção 2 selecionada.");
        break;
    case 3:
        Console.WriteLine("Opção 3 selecionada.");
        break;
    default:
        Console.WriteLine("Opção inválida.");
        break;
}



