## Operadores e Estruturas em C#

### Operadores Aritméticos

- `+` (adição): Soma dois valores.
- `-` (subtração): Subtrai um valor de outro.
- `*` (multiplicação): Multiplica dois valores.
- `/` (divisão): Divide um valor pelo outro.
- `%` (módulo): Retorna o resto da divisão de um valor pelo outro.

### Operadores de Atribuição

- `=` (atribuição): Atribui um valor a uma variável.
- `+=` (atribuição de adição): Adiciona um valor a uma variável.
- `-=` (atribuição de subtração): Subtrai um valor de uma variável.
- `*=` (atribuição de multiplicação): Multiplica uma variável por um valor.
- `/=` (atribuição de divisão): Divide uma variável por um valor.

### Operadores de Comparação

- `==` (igual): Verifica se dois valores são iguais.
- `!=` (diferente): Verifica se dois valores são diferentes.
- `<` (menor que): Verifica se um valor é menor que outro.
- `>` (maior que): Verifica se um valor é maior que outro.
- `<=` (menor ou igual a): Verifica se um valor é menor ou igual a outro.
- `>=` (maior ou igual a): Verifica se um valor é maior ou igual a outro.

### Operadores Lógicos

- `&&` (E lógico): Retorna verdadeiro se ambas as condições forem verdadeiras.
- `||` (OU lógico): Retorna verdadeiro se pelo menos uma das condições for verdadeira.
- `!` (Negação lógica): Inverte o valor lógico de uma expressão.

### Operadores Bit a Bit

- `&` (E bit a bit): Realiza uma operação AND bit a bit entre dois valores.
- `|` (OU bit a bit): Realiza uma operação OR bit a bit entre dois valores.
- `^` (OU exclusivo bit a bit): Realiza uma operação XOR bit a bit entre dois valores.
- `~` (Negação bit a bit): Inverte todos os bits de um valor.

### Operadores de Deslocamento de Bits

- `<<` (Deslocamento à esquerda): Desloca os bits de um valor para a esquerda.
- `>>` (Deslocamento à direita): Desloca os bits de um valor para a direita.

### Estruturas de Controle

#### Estruturas Condicionais

- `if` (se): Executa um bloco de código se a condição for verdadeira.
- `else` (senão): Executa um bloco de código alternativo se a condição do `if` for falsa.
- `else if` (senão se): Permite testar múltiplas condições alternativas após um `if`.
- `switch` (escolha): Avalia uma expressão e executa um bloco de código correspondente com base em valores.

#### Estruturas de Repetição

- `for` (para): Executa um bloco de código várias vezes com base em uma condição.
- `while` (enquanto): Executa um bloco de código enquanto uma condição é verdadeira.
- `do while` (faça enquanto): Executa um bloco de código pelo menos uma vez e depois continua enquanto a condição é verdadeira.
- `foreach` (para cada): Itera através de elementos de uma coleção.


